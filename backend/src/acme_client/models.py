# generated by datamodel-codegen:
#   filename:  acme_payments_api.yaml
#
#   Hand modified to reduce noise and duplication

from enum import Enum
from decimal import Decimal
from datetime import datetime
from typing import Any, List, Optional

from pydantic import BaseModel, AnyUrl, UUID4


class Dates(BaseModel):
    created_at: datetime
    updated_at: datetime


class PaymentTypeEnum(Enum):
    PURCHASE = "PURCHASE"
    REFUND = "REFUND"
    # manually added, doc says `PURCHASE`, response was `SALE`
    SALE = "SALE"


class Customer(Dates):
    id: UUID4
    first_name: str
    last_name: str
    phone: str
    address: Optional[str] | None
    email: str | None


class Merchant(Dates):
    id: UUID4
    name: str


class Order(Dates):
    id: UUID4
    transactions: List[UUID4]
    type: PaymentTypeEnum
    # A list of items for the purchase order. Should be a list of objects.
    # Keys should be `name` with the item name, `quantity` with the item count
    # and `unit_price` with the price per unit.
    items_data: Any
    total_amount: Decimal
    trace_id: str
    parent_order: Optional[UUID4] | None
    customer: UUID4
    merchant: UUID4


class Transaction(Dates):
    id: UUID4
    amount: Decimal
    type: PaymentTypeEnum
    customer: UUID4
    merchant: UUID4
    order: UUID4


class Paginated(BaseModel):
    count: int | None
    next: Optional[AnyUrl] | None
    previous: Optional[AnyUrl] | None


class PaginatedCustomers(Paginated):
    results: Optional[List[Customer]] | None


class PaginatedMerchants(Paginated):
    results: Optional[List[Merchant]] | None


class PaginatedOrders(Paginated):
    results: Optional[List[Order]] | None


class PaginatedTransactions(Paginated):
    results: Optional[List[Transaction]] | None
